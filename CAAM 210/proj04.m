function population_models_driver
% population_models_driver
% generates and plots data for the logistic growth model and predator-prey
% model
% Inputs: None
% Outputs: None
% Quan Le, CAAM 210, Fall 2019, Project 04
% Last Modified: October 14, 2019


% assignment secion (Ra) and (Rb)
LGMplotter

% assignment sections (RFa) (RFb) (RFc) (RFd)
PPplots

% Comments (RFb)

% The time-dependent solution of any initial rabbit poplulation will
% approach K, the carrying capacity


% Comments (RFc)

% The figure demostrates the rise and fall of the rabbit and fox
% populations. Note that the extrema of one graph is almost always at the
% extrema of the derivative of the other. 

% It demonstrates the complexity of the system: both populations rise, but
% at a certain threshold, the population of the foxes reaches its greatest
% growth and the rabbits peak. Then, the rabbits sharply decline, while the
% foxes peak. The low rabbit population continues to create a decline in
% the fox population, until there are few enough foxes for the rabbit
% population to grow again. And thus, the cycle continues.

% With regards to the different methods, it is clear that euler's method
% with a smaller delta best approximates the curve generated by ode45,
% while euler's method with the larger method is more deviant.


% Comments (RFd)

% The solution to the population model is both stable and cyclical, as it
% loops upon itself, to infinity. 

% It is the same data as part (RFc), but
% the time dependency has been removed. Thus, all possible population
% states are shown.
end



function [x,y]= LGM(R0) % Logistic Growth Model
% [x,y]= LGM(R0)
% generates data for the logistic growth model
% Inputs: R0, the initial condition for the differential equation In terms 
%             of the model, it is the initial population of rabbits
% Outputs: x, the time over which the solution is found
%          y, the actual population of the rabbits


% initials and constants
K = 100; r = 1; delta = 0.01;
% generate points using euler's method
x = 0:delta:15; % domain
for point = x
    % for x0
    if point == 0
        y = R0;
        R = R0;
        dy = r*R0*(1-R0/K);
    % for all other x
    else
        R = R + delta*dy;
        y = [y, R];
        dy = r*R*(1-R/K);
    end
end
end



function LGMplotter % Plots LGM
% LGMplotter
% Uses LGM to generate data for different R0, then graphs the two solutions
% Inputs: None
% Outputs: None


% Plots the time variance of the logistic growth model, r0 = 20
[x1,y1] = LGM(20);
% Figure 1
figure(1)
plot(x1,y1)
title("rabbit population with r0 = 20")
xlabel("time")
ylabel("population")

% Plots the time variance of the logistic growth model, r0 = 150
[x2, y2] = LGM(150);
% Figure 2
figure(2)
plot(x2,y2)
title("rabbit population with r0 = 150")
xlabel("time")
ylabel("population")
end 



function [t, setR, setF] = pred_prey(delta) % Predator-Prey system, euler's
% [t, setR, setF] = pred_prey(delta)
% Uses euler's method and a given delta to generate the two solutions for
% the predator-prey population model
% Inputs: delta, the time increment for euler's method
% Outputs: t, the vector domain of the solution generated, correspods to 
%             the time sample
%          setR, the vector of rabbit populations, with respect to time
%          setF, the vector of fox populations, with respect to time


% initial values and constants
k1=3; k2=3e-3; k3=6e-4; k4=0.5; 
R0=1000; F0=500;
% initialize domain
t = 0:delta:15;
% begin euler's method
for point = t
    if point == 0
        setR = R0; % initialize sets of data
        setF = F0;
        R = R0; % initialize value
        F = F0;
        dR = k1*R0 - k2*R0*F0; % initialize derivative steps
        dF = k3*R0*F0 - k4*F0;
    else
        R = R + delta*dR; 
        setR = [setR, R];
        F = F + delta*dF;
        setF = [setF, F];
        dR = k1*R - k2*R*F;
        dF = k3*R*F - k4*F;
    end
end
end



function [t,r,f] = ode_method % predator-prey system, ode45
% [t,r,f] = ode_method
% Uses ode45 to find the solution to the predator-prey system, based on
% pre-specified initial conditions
% Inputs: None
% Outputs: t, the vector domain of the solution generated, correspods to 
%             the time sample
%          r, the vector of rabbit populations, with respect to time
%          f, the vector of fox populations, with respect to time


% initialize constants
k1=3; k2=3e-3; k3=6e-4; k4=0.5; 
tspan = [0 15];
% initial conditions
r0 = 1000;
f0 = 500;
i0 = [r0;f0];
% define the system of equations
odefun = @(t,Y) [k1*Y(1)-k2*Y(1)*Y(2);
                k3*Y(1)*Y(2)-k4*Y(2)];

% note that we will let Y(1) equal to the rabbit pop, with the Y(2) being
% the fox pop

options = odeset('RelTol', 1e-6); % precision of model
[t, rf] = ode45(odefun,tspan,i0,options); % generates the actual data
% splits the data set to r and f
r = rf(:,1);    f = rf(:,2);

end



function PPplots
% PPplots
% Generates all data for all methods of solving the predator-prey system,
% and plots them all
% Inputs: None
% Outputs: None

[t1, R1, F1] = pred_prey(0.01); % generates euler data, delta=0.01
[t2, R2, F2] = pred_prey(0.001); % generates euler data, delta=0.001
[t3,r,f] = ode_method; % generates ode45 data

% plots all solutions to the pred-prey system
figure(3)
plot(t1,R1,t1,F1,t2,R2,t2,F2,t3,r,t3,f)
labels = ["rabbits, euler, delta = 0.01";
          "foxes, euler, delta = 0.01";
          "rabbits, euler, delta = 0.001";
          "foxes, euler, delta = 0.001";
          "rabbits, ode45";
          "foxes, ode45"];
legend(labels)
title("time deprendent solutions to the predator prey population model")
xlabel("time")
ylabel("population")


% assignment section (RFd)
figure(4)
plot(r,f)
title("rabbit-fox population dependency solved from ode45")
xlabel("rabbit population")
ylabel("fox population")

end
